@startuml GitDecomposer Architecture
!theme vibrant

title GitDecomposer - Service-Oriented Git Repository Analysis Tool

package "User Interface Layer" {
  component "CLI Interface" as CLI
  note right of CLI : Command-line entry point\nArgument parsing and validation
}

package "Application Interface Layer" {
  component "GitMetrics" as GM
  note right of GM : Simplified API facade\nBackward compatibility
}

package "Service Layer" {
  component "DataAggregator" as DA
  component "DashboardGenerator" as DG
  component "ReportGenerator" as RG
  component "ExportService" as ES
  component "AdvancedAnalytics" as AA
  
  note right of DA : Data consolidation\nRepository summaries
  note right of DG : Interactive dashboards\nVisualization creation
  note right of RG : HTML report generation\nNavigation between reports
  note right of ES : CSV export\nData serialization
  note right of AA : Advanced metrics\nPredictive analytics
}

package "Core Analysis Engine" {
  component "GitRepository" as GR
  note right of GR : Git data abstraction\nRepository operations
}

package "Specialized Analyzers" {
  component "CommitAnalyzer" as CA
  component "FileAnalyzer" as FA  
  component "ContributorAnalyzer" as CRA
  component "BranchAnalyzer" as BA
  component "AdvancedMetrics" as AM
  
  note right of CA : Commit patterns\nFrequency analysis
  note right of FA : File changes\nHotspot detection
  note right of CRA : Developer activity\nCollaboration patterns
  note right of BA : Branch strategies\nLifecycle analysis
  note right of AM : Quality metrics\nTechnical debt
}

package "Data Models" {
  component "Analysis Models" as Models
  component "Repository Models" as RM
  component "Metrics Models" as MM
  
  note right of Models : Structured data types\nAnalysis results
  note right of RM : Repository information\nSummary structures
  note right of MM : Performance metrics\nQuality indicators
}

package "Visualization Engine" {
  component "VisualizationEngine" as VE
  component "Chart Factory" as CF
  
  note right of VE : Interactive dashboards\nPlot generation
  note right of CF : Chart creation\nCustomization
}

package "Output Layer" {
  file "HTML Reports" as HTML
  file "CSV Data" as CSV
  file "Console Output" as Console
  file "Interactive Dashboards" as Dashboards
}

' User interactions
CLI --> GM : simplified interface
CLI --> DA : direct service access
CLI --> Console : display results

' Application interface
GM --> DA : data aggregation
GM --> DG : dashboard creation
GM --> RG : report generation
GM --> ES : data export

' Service layer relationships
DA --> GR : repository access
DA --> CA : commit analysis
DA --> FA : file analysis  
DA --> CRA : contributor analysis
DA --> BA : branch analysis
DA --> AM : advanced metrics

DG --> DA : aggregated data
DG --> VE : visualization requests
RG --> DG : dashboard integration
RG --> HTML : report generation
ES --> DA : data extraction
ES --> CSV : data export
AA --> DA : data access
AA --> AM : advanced calculations

' Analyzer dependencies
CA --> GR : git data access
FA --> GR : git data access
CRA --> GR : git data access
BA --> GR : git data access
AM --> GR : git data access

' Data model usage
DA --> Models : structured results
DA --> RM : repository summaries
AA --> MM : metrics models
CA --> Models : commit data
FA --> Models : file data
CRA --> Models : contributor data
BA --> Models : branch data

' Visualization pipeline
DG --> VE : analysis data
VE --> CF : chart generation
CF --> Dashboards : interactive charts
RG --> HTML : comprehensive reports
ES --> CSV : structured exports

' External dependencies
note top of GR : Dependencies:\n- GitPython\n- Git CLI
note top of VE : Dependencies:\n- Plotly (primary)\n- Interactive charts
note top of Models : Dependencies:\n- Pandas\n- NumPy\n- Dataclasses

' Service layer benefits
note bottom of DA : Service Benefits:\n- Clean separation of concerns\n- Testable components\n- Modular architecture\n- Easy to extend

@enduml
